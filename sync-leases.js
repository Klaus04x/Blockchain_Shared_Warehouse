#!/usr/bin/env node

/**
 * Script Sync v√† Verify Leases
 * Ki·ªÉm tra v√† ƒë·ªìng b·ªô tr·∫°ng th√°i leases gi·ªØa Database v√† Blockchain
 * 
 * L∆ØU √ù: Script n√†y KH√îNG T·∫†O leases m·ªõi tr√™n blockchain
 * Ch·ªâ verify v√† update tr·∫°ng th√°i t·ª´ blockchain v·ªÅ database
 */

const { ethers } = require('ethers');
const mysql = require('mysql2/promise');
const ContractAddressManager = require('./contract-address-manager');

async function syncLeases() {
  console.log('\n' + '='.repeat(70));
  console.log('üîÑ ƒê·ªíNG B·ªò V√Ä VERIFY LEASES');
  console.log('='.repeat(70) + '\n');

  let connection = null;

  try {
    // K·∫øt n·ªëi database
    console.log('üì° ƒêang k·∫øt n·ªëi database...');
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'warehouse_sharing'
    });
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database\n');

    // K·∫øt n·ªëi blockchain
    console.log('‚õìÔ∏è  ƒêang k·∫øt n·ªëi blockchain...');
    const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');
    
    try {
      await provider.getBlockNumber();
      console.log('‚úÖ ƒê√£ k·∫øt n·ªëi blockchain\n');
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi blockchain!');
      console.log('üí° Ch·∫°y: npm run dev:blockchain');
      process.exit(1);
    }

    const privateKey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80';
    const wallet = new ethers.Wallet(privateKey, provider);

    const contractData = ContractAddressManager.getContractAddress();
    if (!contractData) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu contract');
      process.exit(1);
    }

    const contract = new ethers.Contract(contractData.address, contractData.abi, wallet);

    // L·∫•y s·ªë l∆∞·ª£ng leases tr√™n blockchain
    const blockchainLeaseCounter = await contract.leaseCounter();
    console.log('üìä Th·ªëng k√™:');
    console.log(`   ‚õìÔ∏è  S·ªë leases tr√™n blockchain: ${blockchainLeaseCounter.toString()}`);

    // L·∫•y t·∫•t c·∫£ leases t·ª´ database
    const [dbLeases] = await connection.execute(`
      SELECT id, blockchain_id, warehouse_id, tenant_address, area, 
             start_date, end_date, total_price, is_active, is_completed, transaction_hash
      FROM leases
      ORDER BY id
    `);

    console.log(`   üì¶ S·ªë leases trong database: ${dbLeases.length}\n`);

    if (dbLeases.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ leases n√†o trong database');
      return;
    }

    console.log('üîç ƒêang verify t·ª´ng lease...\n');

    let validCount = 0;
    let invalidCount = 0;
    let updatedCount = 0;
    let issuesFound = [];

    for (const dbLease of dbLeases) {
      console.log(`üìã Lease DB ID ${dbLease.id} (Blockchain ID: ${dbLease.blockchain_id}):`);
      
      try {
        // Ki·ªÉm tra lease tr√™n blockchain
        const blockchainLease = await contract.getLease(dbLease.blockchain_id);
        
        // Ki·ªÉm tra n·∫øu lease t·ªìn t·∫°i tr√™n blockchain
        // tenant === ZeroAddress nghƒ©a l√† struct ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o (lease kh√¥ng t·ªìn t·∫°i)
        if (blockchainLease.tenant === ethers.ZeroAddress) {
          console.log(`   ‚ùå KH√îNG T·ªíN T·∫†I tr√™n blockchain!`);
          console.log(`   üí° Lease n√†y ƒë√£ b·ªã m·∫•t ho·∫∑c blockchain_id sai`);
          invalidCount++;
          issuesFound.push({
            id: dbLease.id,
            issue: 'Kh√¥ng t·ªìn t·∫°i tr√™n blockchain',
            blockchain_id: dbLease.blockchain_id
          });
          continue;
        }

        // So s√°nh d·ªØ li·ªáu
        const matches = {
          tenant: blockchainLease.tenant.toLowerCase() === dbLease.tenant_address.toLowerCase(),
          area: parseInt(blockchainLease.area.toString()) === parseInt(dbLease.area),
          totalPrice: blockchainLease.totalPrice.toString() === dbLease.total_price.toString(),
          isActive: blockchainLease.isActive === Boolean(dbLease.is_active),
          isCompleted: blockchainLease.isCompleted === Boolean(dbLease.is_completed)
        };

        const allMatch = Object.values(matches).every(m => m);

        if (allMatch) {
          console.log('   ‚úÖ H·ª£p l·ªá - D·ªØ li·ªáu kh·ªõp v·ªõi blockchain');
          validCount++;
        } else {
          console.log('   ‚ö†Ô∏è  C√≥ s·ª± kh√°c bi·ªát:');
          
          if (!matches.tenant) console.log(`      - Tenant: DB=${dbLease.tenant_address}, BC=${blockchainLease.tenant}`);
          if (!matches.area) console.log(`      - Area: DB=${dbLease.area}, BC=${blockchainLease.area.toString()}`);
          if (!matches.totalPrice) console.log(`      - Price: DB=${dbLease.total_price}, BC=${blockchainLease.totalPrice.toString()}`);
          if (!matches.isActive) console.log(`      - Active: DB=${dbLease.is_active}, BC=${blockchainLease.isActive}`);
          if (!matches.isCompleted) console.log(`      - Completed: DB=${dbLease.is_completed}, BC=${blockchainLease.isCompleted}`);

          // Update database n·∫øu tr·∫°ng th√°i kh√°c
          if (!matches.isActive || !matches.isCompleted) {
            console.log('   üîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ blockchain...');
            
            await connection.execute(
              'UPDATE leases SET is_active = ?, is_completed = ? WHERE id = ?',
              [blockchainLease.isActive, blockchainLease.isCompleted, dbLease.id]
            );
            
            console.log('   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
            updatedCount++;
          }

          validCount++;
        }

      } catch (error) {
        console.log(`   ‚ùå L·ªói khi ki·ªÉm tra: ${error.message}`);
        invalidCount++;
        issuesFound.push({
          id: dbLease.id,
          issue: error.message,
          blockchain_id: dbLease.blockchain_id
        });
      }

      console.log('');
    }

    // T·ªïng k·∫øt
    console.log('\n' + '='.repeat(70));
    console.log('üìä K·∫æT QU·∫¢ ƒê·ªíNG B·ªò');
    console.log('='.repeat(70));
    console.log(`‚úÖ Leases h·ª£p l·ªá: ${validCount}`);
    console.log(`‚ùå Leases kh√¥ng h·ª£p l·ªá: ${invalidCount}`);
    console.log(`üîÑ Leases ƒë√£ c·∫≠p nh·∫≠t: ${updatedCount}`);
    console.log(`üì¶ T·ªïng s·ªë leases: ${dbLeases.length}`);

    if (issuesFound.length > 0) {
      console.log('\n‚ö†Ô∏è  C√ÅC V·∫§N ƒê·ªÄ PH√ÅT HI·ªÜN:');
      issuesFound.forEach((issue, index) => {
        console.log(`${index + 1}. Lease DB ID ${issue.id} (Blockchain ID: ${issue.blockchain_id})`);
        console.log(`   ‚Üí ${issue.issue}`);
      });

      console.log('\nüí° KHUY·∫æN NGH·ªä:');
      console.log('   1. N·∫øu blockchain b·ªã reset: Kh√¥ng th·ªÉ kh√¥i ph·ª•c leases');
      console.log('   2. S·ª≠ d·ª•ng persistent blockchain (hardhat-data) ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu');
      console.log('   3. C√≥ th·ªÉ x√≥a leases kh√¥ng h·ª£p l·ªá kh·ªèi database:');
      console.log('      DELETE FROM leases WHERE blockchain_id IN (...);');
    }

    console.log('\n' + '='.repeat(70) + '\n');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    console.error(error.stack);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// CLI usage
if (require.main === module) {
  syncLeases()
    .then(() => {
      console.log('‚úÖ Ho√†n th√†nh!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå L·ªói:', error);
      process.exit(1);
    });
}

module.exports = syncLeases;

