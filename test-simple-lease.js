const { ethers } = require('ethers');

async function testSimpleLease() {
  console.log('üß™ Testing simple lease creation...');
  
  // K·∫øt n·ªëi Hardhat node
  const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');
  
  // Contract info
  const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';
  const contractABI = [
    "function createLease(uint256 warehouseId, uint256 area, uint256 duration) external payable",
    "function getWarehouse(uint256 id) external view returns (address owner, string memory name, string memory location, uint256 totalArea, uint256 availableArea, uint256 pricePerSqmPerDay, string memory imageUrl, string memory description, bool isActive)"
  ];
  
  try {
    // S·ª≠ d·ª•ng private key c·ªßa Hardhat account ƒë·∫ßu ti√™n
    const privateKey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80';
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log('‚úÖ Connected to account:', wallet.address);
    console.log('üí∞ Balance:', ethers.formatEther(await provider.getBalance(wallet.address)), 'ETH');
    
    // T·∫°o contract instance
    const contract = new ethers.Contract(contractAddress, contractABI, wallet);
    
    // Ki·ªÉm tra t·∫•t c·∫£ warehouses
    console.log('üîç Checking all warehouses...');
    for (let i = 1; i <= 5; i++) {
      try {
        const warehouse = await contract.getWarehouse(i);
        console.log(`üì¶ Warehouse ${i}:`, {
          name: warehouse.name,
          availableArea: warehouse.availableArea.toString(),
          pricePerSqmPerDay: ethers.formatEther(warehouse.pricePerSqmPerDay),
          isActive: warehouse.isActive
        });
      } catch (e) {
        console.log(`üì¶ Warehouse ${i}: Not found`);
      }
    }
    
    // T√¨m warehouse active v·ªõi di·ªán t√≠ch nh·ªè nh·∫•t
    let targetWarehouse = null;
    let minArea = Infinity;
    
    for (let i = 1; i <= 5; i++) {
      try {
        const warehouse = await contract.getWarehouse(i);
        if (warehouse.isActive && warehouse.availableArea > 0) {
          const area = parseInt(warehouse.availableArea.toString());
          if (area < minArea) {
            minArea = area;
            targetWarehouse = { id: i, ...warehouse };
          }
        }
      } catch (e) {
        // Skip
      }
    }
    
    if (!targetWarehouse) {
      throw new Error('Kh√¥ng t√¨m th·∫•y warehouse n√†o active!');
    }
    
    console.log('üéØ Target warehouse:', {
      id: targetWarehouse.id,
      name: targetWarehouse.name,
      availableArea: targetWarehouse.availableArea.toString(),
      pricePerSqmPerDay: ethers.formatEther(targetWarehouse.pricePerSqmPerDay),
      isActive: targetWarehouse.isActive
    });
    
    // T√≠nh to√°n gi√° thu√™
    const area = Math.min(1, parseInt(targetWarehouse.availableArea.toString())); // Thu√™ 1 m¬≤ ho·∫∑c t·∫•t c·∫£ n·∫øu < 1
    const duration = 1; // 1 ng√†y
    const pricePerSqmPerDay = targetWarehouse.pricePerSqmPerDay;
    const totalPrice = pricePerSqmPerDay * BigInt(area) * BigInt(duration);
    
    console.log('üí∞ Total price:', ethers.formatEther(totalPrice), 'ETH');
    
    // Gas settings ƒë∆°n gi·∫£n
    const gasSettings = {
      value: totalPrice,
      gasPrice: ethers.parseUnits('2', 'gwei'),
      gasLimit: 100000
    };
    
    console.log('‚õΩ Gas settings:', {
      value: ethers.formatEther(totalPrice) + ' ETH',
      gasPrice: '2 Gwei',
      gasLimit: 100000
    });
    
    // Estimate gas
    console.log('üîç Estimating gas...');
    const estimatedGas = await contract.createLease.estimateGas(targetWarehouse.id, area, duration, gasSettings);
    console.log('‚úÖ Estimated gas:', estimatedGas.toString());
    
    // T·∫°o lease
    console.log('üöÄ Creating lease...');
    const tx = await contract.createLease(targetWarehouse.id, area, duration, gasSettings);
    console.log('üìù Transaction hash:', tx.hash);
    
    console.log('‚è≥ Waiting for confirmation...');
    const receipt = await tx.wait();
    console.log('‚úÖ Transaction confirmed! Block:', receipt.blockNumber);
    
    // Ki·ªÉm tra warehouse sau khi thu√™
    console.log('üîç Checking warehouse after lease...');
    const warehouseAfter = await contract.getWarehouse(targetWarehouse.id);
    console.log('üì¶ Warehouse after:', {
      availableArea: warehouseAfter.availableArea.toString(),
      isActive: warehouseAfter.isActive
    });
    
    console.log('üéâ SUCCESS! Lease created successfully!');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error('üìä Error details:', {
      code: error.code,
      reason: error.reason,
      data: error.data
    });
  }
}

testSimpleLease();
