/**
 * Script ƒë·ªÉ tƒÉng th·ªùi gian blockchain (Time Travel)
 * D√πng ƒë·ªÉ test h·ª£p ƒë·ªìng m√† kh√¥ng c·∫ßn ƒë·ª£i th·ªùi gian th·ª±c
 * 
 * Usage:
 *   npx hardhat run scripts/increase-time.js --network localhost
 */

const { ethers } = require('hardhat');

async function main() {
  console.log('\n' + '='.repeat(60));
  console.log('‚è∞ BLOCKCHAIN TIME MANIPULATION');
  console.log('='.repeat(60) + '\n');

  // L·∫•y th·ªùi gian hi·ªán t·∫°i
  const provider = ethers.provider;
  const blockBefore = await provider.getBlock('latest');
  const timeBefore = blockBefore.timestamp;
  
  console.log('üìÖ Th·ªùi gian blockchain hi·ªán t·∫°i:');
  console.log('   Timestamp:', timeBefore);
  console.log('   Date:', new Date(timeBefore * 1000).toLocaleString());

  // H·ªèi ng∆∞·ªùi d√πng mu·ªën tƒÉng bao nhi√™u
  const args = process.argv.slice(2);
  let increaseSeconds = 86400; // Default: 1 ng√†y

  if (args.length > 0) {
    const arg = args[0].toLowerCase();
    if (arg.includes('day')) {
      const days = parseInt(arg.replace('day', '').replace('s', '')) || 1;
      increaseSeconds = days * 86400;
      console.log(`\n‚è≠Ô∏è  TƒÉng th·ªùi gian: ${days} ng√†y`);
    } else if (arg.includes('hour')) {
      const hours = parseInt(arg.replace('hour', '').replace('s', '')) || 1;
      increaseSeconds = hours * 3600;
      console.log(`\n‚è≠Ô∏è  TƒÉng th·ªùi gian: ${hours} gi·ªù`);
    } else if (arg.includes('minute')) {
      const minutes = parseInt(arg.replace('minute', '').replace('s', '')) || 1;
      increaseSeconds = minutes * 60;
      console.log(`\n‚è≠Ô∏è  TƒÉng th·ªùi gian: ${minutes} ph√∫t`);
    } else {
      increaseSeconds = parseInt(arg) || 86400;
      console.log(`\n‚è≠Ô∏è  TƒÉng th·ªùi gian: ${increaseSeconds} gi√¢y`);
    }
  } else {
    console.log('\n‚è≠Ô∏è  TƒÉng th·ªùi gian: 1 ng√†y (m·∫∑c ƒë·ªãnh)');
  }

  // TƒÉng th·ªùi gian blockchain
  console.log('\nüîÑ ƒêang thay ƒë·ªïi th·ªùi gian blockchain...');
  await provider.send('evm_increaseTime', [increaseSeconds]);
  await provider.send('evm_mine'); // Mine block m·ªõi ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi

  // Ki·ªÉm tra th·ªùi gian sau khi thay ƒë·ªïi
  const blockAfter = await provider.getBlock('latest');
  const timeAfter = blockAfter.timestamp;

  console.log('\n‚úÖ Thay ƒë·ªïi th·ªùi gian th√†nh c√¥ng!');
  console.log('\nüìÖ Th·ªùi gian blockchain sau khi thay ƒë·ªïi:');
  console.log('   Timestamp:', timeAfter);
  console.log('   Date:', new Date(timeAfter * 1000).toLocaleString());
  
  const actualIncrease = timeAfter - timeBefore;
  console.log('\nüìä Th·ªëng k√™:');
  console.log('   Th·ªùi gian ƒë√£ tƒÉng:', actualIncrease, 'gi√¢y');
  console.log('   T∆∞∆°ng ƒë∆∞∆°ng:', Math.floor(actualIncrease / 86400), 'ng√†y',
              Math.floor((actualIncrease % 86400) / 3600), 'gi·ªù',
              Math.floor((actualIncrease % 3600) / 60), 'ph√∫t');

  console.log('\nüí° Tips:');
  console.log('   - Gi·ªù b·∫°n c√≥ th·ªÉ ho√†n th√†nh c√°c h·ª£p ƒë·ªìng ƒë√£ h·∫øt h·∫°n');
  console.log('   - Ki·ªÉm tra h·ª£p ƒë·ªìng tr√™n frontend ƒë·ªÉ test');
  console.log('   - Th·ªùi gian n√†y ch·ªâ √°p d·ª•ng cho blockchain local');
  
  console.log('\n' + '='.repeat(60) + '\n');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  });

